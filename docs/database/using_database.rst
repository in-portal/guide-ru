Работа с базой данных
*********************
`Data Source`_

При работе с базой данных следует использовать экземпляр класса ``kDBConnection`` доступный через
атрибут ``Conn`` почти у каждого класса. В общем случае это выглядит так:

.. code:: php

   $result = $this->Conn->MethodName($params);

Вместо ``MethodName`` можно использовать методы описанные далее. Универсальная проверка на присутствие
данных в ответе на запрос может выглядеть так:

.. code:: php

   if ($result) {
       // код будет выполнен только в случае удачного
       // завершения запроса и при наличии данных
   }

.. caution::

   При изменении данных в базе **в ручную** не забывайте изменять данные в связанных таблицах,
   иначе может **нарушится целостность** данных (data integrity) в базе.

Выборка данных из базы
======================

+----------------------+------------------------------------------------------+
| название метода      | описание метода                                      |
+======================+======================================================+
| .. config-property:: | Возвращает первое поля первого ряда из запроса.      |
|    :name: GetOne     |                                                      |
|    :type: mixed      |                                                      |
+----------------------+------------------------------------------------------+
| .. config-property:: | Возвращает первый ряд запроса.                       |
|    :name: GetRow     |                                                      |
|    :type: array      |                                                      |
+----------------------+------------------------------------------------------+
| .. config-property:: | Возвращает первую колонку из запроса.                |
|    :name: GetCol     |                                                      |
|    :type: array      |                                                      |
+----------------------+------------------------------------------------------+
| .. config-property:: | Выбирает все записи из базы под данному sql запросу. |
|    :name: Query      |                                                      |
|    :type: array      |                                                      |
+----------------------+------------------------------------------------------+

При неудачной выборке будет возвращён ``false`` или пустой массив.

Обработка результатов запроса
=============================

+---------------------------+--------------------------------------------------------------------------------------+
| название метода           | описание метода                                                                      |
+===========================+======================================================================================+
| .. config-property::      | Получить ID (из колонки autoincrement типа) от последней вставленной записи.         |
|    :name: getInsertID     |                                                                                      |
|    :type: int             |                                                                                      |
+---------------------------+--------------------------------------------------------------------------------------+
| .. config-property::      | Вернуть количество рядов, которые изменил/выбрал запрос.                             |
|    :name: getAffectedRows |                                                                                      |
|    :type: int             |                                                                                      |
+---------------------------+--------------------------------------------------------------------------------------+
| .. config-property::      | Экранировать строку для вставки в sql запрос (также ставит апострофы вокруг строки). |
|    :name: qstr            |                                                                                      |
|    :type: string          |                                                                                      |
+---------------------------+--------------------------------------------------------------------------------------+
| .. config-property::      | Узнать есть-ли таблица в базе данных.                                                |
|    :name: TableFound      |                                                                                      |
|    :type: boolean         |                                                                                      |
+---------------------------+--------------------------------------------------------------------------------------+

Изменение данных в базе
=======================

+----------------------+--------------------------------------------+
| название метода      | описание метода                            |
+======================+============================================+
| .. config-property:: | Вставит данные из ассоциативного массива.  |
|    :name: doInsert   |                                            |
+----------------------+--------------------------------------------+
| .. config-property:: | Обновить данные из ассоциативного массива. |
|    :name: doUpdate   |                                            |
+----------------------+--------------------------------------------+

Добавление колонок в таблицу
============================

При добавлении колонок в таблицы следует придерживаться следующих правил в указании опций колонок
исходя из содержания будущей колонки:

- сумма (деньги) - тип ``DECIMAL(20,2)`` и ``NOT NULL``
- дата (timestamp) - тип ``INT(11)`` и ``NULL``
- короткий текст (имя/фамилия, до 8KB) - ``VARCHAR(255)`` и ``NOT NULL``
- текст средней длинны (описание, от 8KB байт и до 64KB) - ``TEXT`` и ``NULL``
- длинный текст (описание, от 64KB и до 4MB) - ``LONGTEXT`` и ``NULL``

В следующих случаях нужно всегда ставить ``INDEX`` на колонку:

- колонка содержит дату;
- колонка содержит статус записи, напр. ``Active``/``Disabled``;
- колонка указывает на то, что запись основная, т.е. ``IsPrimary``;
- по колонке будет делаться сортировка и колонка цифровая, напр. ``Order``, ``Priority``;
- по колонке может быть сделать ``JOIN``;
- колонка является ``ForeignKey``.

.. note::

   В каждой таблице должен быть **основной ключ** (primary key). Этот ключ всегда должен
   состоять из **одной цифровой колонки** и не должен быть ``UNSIGNED``.

Значение по умолчанию
---------------------

Значение по умолчанию должно явно указано в декларации поля добавлением ``DEFAULT ...`` части в SQL.

Использование слова NULL
------------------------

Если, и только если, требуется знать факт отсутствия значения в колонке, то её надо создавать, как ``NULL``.
Во всех остальных случаях колонка должна быть ``NOT NULL``.

.. note::

   Все колонки типов TINYTEXT, TEXT, LONGTEXT должны быть NULL без DEFAULT значения (требование в MySQL5).

Использование слова UNSIGNED
----------------------------

Если присутствует **100% уверенность** в том, что в колонке не может быть отрицательных значений, то
колонку нужно делать ``UNSIGNED``. Колонки, где храниться ``timestamp`` нельзя делать ``UNSIGNED`` в
тех случаях, когда

- в колонке с датой может быть дата меньше 1 января 1970 года;
- в колонке находиться только время (без даты).

.. seealso::

   - :doc:`/database/useful_sqls`
   - `Нумерация рядов в MySQL <http://www.xaprb.com/blog/2006/12/02/how-to-number-rows-in-mysql/>`__

.. _Data Source: http://guide.in-portal.org/rus/index.php/K4:%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0_%D1%81_%D0%B1%D0%B0%D0%B7%D0%BE%D0%B9_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85
