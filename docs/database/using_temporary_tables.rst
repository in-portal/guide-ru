Работа с временными таблицами
*****************************
`Data Source`_

**Временные таблицы** это таблицы, создающиеся на время редактирования записей в базе данных. Они предназначены
для хранения их данных до момента сохранения или отмены изменений. Временные таблицы создаются при открытии формы
редактирования, затем в них копируются данные из оригинальных таблиц. После окончания редактирования (в случае с
сохранением изменений) данные копируются обратно в оригинальные таблицы, затем временные таблицы уничтожаются. При
отмене редактирования данные не копируются, но временные таблицы также уничтожаются.

Временные таблицы, в первую очередь, были придуманы для редактирования сложных записей. Главное преимущество -
возможность отменить все сделанные изменения при редактировании в случаях, когда форма редактирования разбита
на несколько последовательно сохраняющихся форм (например, вкладок или форм редактирования подчинённых записей).

Подробнее о связи главных и подчинённых записей можно прочитать в статье :doc:`/components/working_with_sub_prefixes`.

.. caution::

   - При работе с временными таблицами следует принимать во внимание тот факт, что при одновременном редактировании
     одной записи несколькими людьми в оригинальной таблице останется отредактированный вариант того, кто сохраняет
     сущность последним.
   - Во временные таблицы также рекурсивно загружаются данные всех подчинённых записей.

Использование временных таблиц
==============================

Для редактирования большинства записей, за редкими исключениями, следует использовать временные таблицы. Также их
следует использовать только в административной консоли, т.к. на пользовательской части сайта временные таблицы не
применяются. Не следует также использовать временные таблицы в некоторых частных случаях, например, для записи в
различные журналы изменений (``logs``). Каждый подобный случай следует рассматривать отдельно.

Чтобы начать редактирование сущности во временной таблице, следует пользоваться ниже приведённым ``JavaScript``
кодом.

.. code:: javascript

   std_edit_item('phone', 'custom/phones/phone_edit');

Эта функция в результате передаст в запросе к серверу событие :doc:`/events/temp_editing/on_edit`. Сама
функция ``std_edit_item`` является стандартной ``JavaScript`` функцией платформы и объявляется в файле
``core/admin_templates/js/script.js``. Ей передаются в качестве параметров :ref:`префикс <uc_Prefix>` и
шаблон с формой редактирования.

Для окончания редактирования во временных таблицах и сохранения записи следует вызвать событие
:doc:`/events/temp_editing/on_save`:

.. code:: javascript

   submit_event('phone', '<inp2:phone_SaveEvent />');

Тэг :doc:`/tags/save_event` вернёт ``OnSave`` в случае, если item phone является
:doc:`главной </components/working_with_sub_prefixes>` и ``OnCreate`` или ``OnUpdate``, когда запись является
:doc:`подчинённой </components/working_with_sub_prefixes>`.

Для окончания редактирования во временных таблицах не сохраняя произведённые изменения следует вызвать
событие :doc:`/events/temp_editing/on_cancel_edit`, которое просто сотрёт использованные в процессе
редактирования таблицы. Обычно это делается при помощи вызова ниже приведённого ``JavaScript`` кода.

.. code:: javascript

   cancel_edit('phone', 'OnCancelEdit', '<inp2:phone_SaveEvent/>', '<inp2:m_Phrase label="la_FormCancelConfirmation" escape="1"/>');

ID записей во временных таблицах
--------------------------------

При работе с временными таблицами следует помнить o принципах присвоения ``ID`` записям, которые в них хранятся.
Они немного отличаются от аналогичных принципов для записей, хранящихся в оригинальных таблицах и заключаются в
следующем:

- те записи, которые существовали на момент начала редактирования, во временных таблицах получают те
  же ``ID``, что и в оригинальных (т.е. уже существующие записи копируются во временные таблицы без изменений);
- запись :doc:`главной сущности </components/working_with_sub_prefixes>` при создании во временной таблице
  (главная сущность во временной таблице в таком случае может быть только одна) получает ``ID`` равное нулю (``0``);
- записи :doc:`подчинённых сущностей </components/working_with_sub_prefixes>` при создании во временных
  таблицах получают отрицательные ``ID``, начиная от ``-1``.

Следует иметь в виду, что при создании :doc:`подчинённых сущностей </components/working_with_sub_prefixes>` в
нестандартной функциональности сразу после вызова метода ``kDBItem::Create`` следует вызывать метод
``kDBItem::setTempID``, иначе запись не получит правильный ``ID`` и механизм не будет работать корректно.
Это будет продемонстрировано на следующем примере.

.. code:: php

   $phone_accessory->Create();
   $phone_accessory->setTempID();

.. note::

   Также во временных таблицах отсутствует ``auto increment``. Это особо важно при создании
   :doc:`подчинённых сущностей </components/working_with_sub_prefixes>` - без вызова метода ``kDBItem::setTempID``
   все они получат одинаковые ``ID``, равные нулю (``0``).

После сохранения и копирования в оригинальные таблицы созданные во временных таблицах записи получают
новые ``ID``, получающиеся обычно при помощи ``auto increment``'а.

Обработка записей после копирования из временной таблицы в оригинальную
-----------------------------------------------------------------------

Чтобы обработать данные сразу после копирования в оригинальные таблицы с учётом новых ``ID``, обычно
переписываются два события:

- :doc:`/events/temp_editing/on_after_copy_to_live` - вызывается после копирования каждой записи. Ему передаются
  два параметра:

+----------------------+--------------------------------------+
| параметр             | описание                             |
+======================+======================================+
| .. config-property:: | ``ID`` записи в оригинальной таблице |
|    :name: id         |                                      |
|    :type: int        |                                      |
+----------------------+--------------------------------------+
| .. config-property:: | ``ID`` записи во временной таблице.  |
|    :name: temp_id    |                                      |
|    :type: int        |                                      |
+----------------------+--------------------------------------+

- :doc:`/events/temp_editing/on_save` - переписать и после вызова родительского метода использовать параметр
  :ref:`ep_OnSave_ids`, в котором находятся ``ID`` записей в оригинальной таблице.

Использование временных таблиц в ItemSQLs и ListSQLs
----------------------------------------------------

Иногда в опциях :ref:`uc_ItemSQLs` или :ref:`uc_ListSQLs`, для ``LEFT JOIN`` или для вложенного
запроса (``subselect``), требуется использовать название таблицы, в которой запись сейчас редактируется,
т.е. временная или оригинальная. Для этого нужно перед :ref:`названием таблицы <uc_TableName>` поставить
``%3$s``, например:

.. code:: php

   'ListSQLs' => Array (
       '' => ' SELECT %1$s.* %2$s
               FROM %1$s
               LEFT JOIN ' . TABLE_PREFIX . '%3$sPhoneAccessories AS phac ON %1$s.PhoneId = phac.PhoneId'
   ),

Данную функциональность следует использовать только для таблиц, записи в которых состоят в родственных
отношениях с данной (т.е. :doc:`подчинённых записей </components/working_with_sub_prefixes>`).

Схема работы класса kTempTablesHandler
======================================

Для реализации основных функций по работе с временными таблицы в платформе используется
класс ``kTempTablesHandler``. Данный класс предоставляет ряд методов, для использования в
:doc:`обработчике событий </components/event_handler/event_handlers>`:

- ``PrepareEdit`` - реализует создание временных таблиц и копирование туда данных из оригинальный таблиц
  для последующего редактирования; в случае создания новой записи ограничивается лишь созданием временных
  таблиц;
- ``SaveEdit`` - сохраняет данные после редактирования, а именно удаляет данные из оригинальных таблиц,
  копирует на их место данные из временных таблиц, удаляет временные таблицы;
- ``CancelEdit`` - удаляет временные таблицы;

Подробнее схема работы этих методов изображена на ниже приведённых диаграммах.

.. figure:: /images/LIVE_2_TEMP.gif
   :figwidth: 180px
   :width: 180px
   :align: left
   :alt: Копирование во временные таблицы при редактировании записей

   Копирование во временные таблицы при редактировании записей

.. figure:: /images/LIVE_2_TEMP_NEW.gif
   :figwidth: 180px
   :width: 180px
   :align: left
   :alt: Создание временных таблиц при создании записи

   Создание временных таблиц при создании записи

.. figure:: /images/TEMP_2_LIVE.gif
   :figwidth: 180px
   :width: 180px
   :align: left
   :alt: Копирование в оригинальные таблицы при сохранении записей

   Копирование в оригинальные таблицы при сохранении записей

.. figure:: /images/CANCEL_EDIT.gif
   :figwidth: 180px
   :width: 180px
   :align: left
   :alt: Удаление временных таблиц при отмене редактирования

   Удаление временных таблиц при отмене редактирования

.. clear-float::

Названия временных таблиц
=========================

Названия временных таблиц получаются при помощи метода ``kApplication::GetTempName``. Как видно из приведённого
ниже кода данного метода, название временной таблицы состоит из следующих частей:

- значение константы :ref:`const_TABLE_PREFIX`;
- текст ``"ses_"``;
- ``ID`` пользовательской сессии;
- ``ID`` окна (если есть, является уникальным для каждого всплывающего окна редактирования сущности);
- текст ``"_edit_"``;
- имя оригинальной таблицы (также со значением константы :ref:`const_TABLE_PREFIX`).

.. code:: php

   function GetTempName($table, $wid = '')
   {
       if (preg_match('/prefix:(.*)/', $wid, $regs)) {
           $wid = $this->GetTopmostWid($regs[1]);
       }

       return TABLE_PREFIX . 'ses_' . $this->GetSID() . ($wid ? '_'.$wid : '') . '_edit_' . $table;
   }

Если редактирование происходит во всплывающем окне, то второй параметр, содержащий идентификатор окна
(``wid`` - ``window id``) является обязательным. В случае, когда он не известен, то можно вместо него
передать строку вида ``prefix:<item_prefix>`` где после слова ``prefix:`` указать :ref:`префикс <uc_Prefix>`
конфигурационного файла, с которым связана переданная в первом параметре таблица.

Удаление временных таблиц
=========================

Временные таблицы в нормальных условиях удаляются в процессе сохранения редактируемых записей, либо
отмены редактирования. Также предусмотрен случай закрытия окна крестиком, при котором также вызывается
событие :doc:`/events/temp_editing/on_cancel_edit`. Но бывают ситуации, когда временные таблицы невозможно
удалить нормальным способом (например, зависание компьютера или браузера, выключение электричества и т.д.).
В таком случае временные таблицы будут удалены при завершении сессии.

Дополнительные возможности класса kTempTablesHandler
====================================================

Класс ``kTempTablesHandler``, кроме функций, относящихся к работе с временными таблицами, также имеет
дополнительные методы, которые используют родственные связи между сущностями. В данный класс такие
методы попали как раз потому, что у класса уже имеется механизм построения и работы с деревом родственных
связей.

Удаление
--------

Стандартный способ реализации функции удаления в проекте - кнопка, на панели инструментов над в списком,
вызывающая событие :doc:`/events/lists/on_mass_delete`. Данное событие для удаления записей использует
класс ``kTempTablesHandler``, т.к. удаляя главную запись, обычно требуется удалить также и все
:doc:`подчинённые </components/working_with_sub_prefixes>` (по цепочке). В событии
:doc:`/events/lists/on_mass_delete` вызывается метод ``kTempTablesHandler::DeleteItems``, которому
передаются префикс, ``special`` и список ``ID`` записей, выбранных для удаления в списке.

Полный список параметров метода ``kTempTablesHandler::DeleteItems`` следующий:

+------------------------+--------------------------------------------------------------------------------------+
| параметр               | описание                                                                             |
+========================+======================================================================================+
| .. config-property::   | Префикс сущности, которую нужно удалить.                                             |
|    :name: $prefix      |                                                                                      |
|    :type: string       |                                                                                      |
+------------------------+--------------------------------------------------------------------------------------+
| .. config-property::   | ``special`` сущности, которую нужно удалить.                                         |
|    :name: $special     |                                                                                      |
|    :type: string       |                                                                                      |
+------------------------+--------------------------------------------------------------------------------------+
| .. config-property::   | Список ``ID`` записей для удаления.                                                  |
|    :name: $ids         |                                                                                      |
|    :type: array        |                                                                                      |
+------------------------+--------------------------------------------------------------------------------------+
| .. config-property::   | Массив параметров сущности, элемент дерева родственных связей. Передаётся внутри     |
|    :name: $master      | самого метода ``kTempTablesHandler::DeleteItems`` для рекурсивного удаления          |
|    :type: array        | подчинённых сущностей.                                                               |
+------------------------+--------------------------------------------------------------------------------------+
| .. config-property::   | Ключ для связи подчинённых сущностей с главной; передаётся внутри самого метода      |
|    :name: $foreign_key | ``kTempTablesHandler::DeleteItems`` для рекурсивного удаления подчинённых сущностей. |
|    :type: int          |                                                                                      |
+------------------------+--------------------------------------------------------------------------------------+

Задать необходимость удаления подчинённых сущностей при удалении главной можно с помощью опции :ref:`uc_AutoDelete`
в конфигурационном файле :doc:`подчинённого </components/working_with_sub_prefixes>` префикса, например:

.. code:: php

   'AutoDelete' => true,

Клонирование (копирование)
--------------------------

Стандартный способ реализации функции клонирования в проекте - кнопка, на панели инструментов над в списком,
вызывающая событие :doc:`/events/lists/on_mass_clone`. Данное событие для клонирования сущностей использует
класс ``kTempTablesHandler``, так как клонируя главную сущность, обычно требуется клонировать также и
:doc:`подчинённые </components/working_with_sub_prefixes>` (по цепочке). В событии ``OnMassClone`` вызывается
метод ``kTempTablesHandler::CloneItems``, которому передаются префикс, ``special`` и список ``ID`` сущностей,
выбранных для клонирования в списке.

Полный список параметров метода ``kTempTablesHandler::CloneItems`` следующий:

+---------------------------+------------------------------------------------------------------------------+
| параметр                  | описание                                                                     |
+===========================+==============================================================================+
| .. config-property::      | Префикс сущности, которую нужно клонировать.                                 |
|    :name: $prefix         |                                                                              |
|    :type: string          |                                                                              |
+---------------------------+------------------------------------------------------------------------------+
| .. config-property::      | ``special`` сущности, которую нужно клонировать.                             |
|    :name: $special        |                                                                              |
|    :type: string          |                                                                              |
+---------------------------+------------------------------------------------------------------------------+
| .. config-property::      | Список ``ID`` сущностей для клонирования.                                    |
|    :name: $ids            |                                                                              |
|    :type: array           |                                                                              |
+---------------------------+------------------------------------------------------------------------------+
| .. config-property::      | Массив параметров сущности, элемент дерева родственных связей; передаётся    |
|    :name: $master         | внутри самого метода ``kTempTablesHandler::CloneItems`` для рекурсивного     |
|    :type: array           | клонирования подчинённых сущностей.                                          |
+---------------------------+------------------------------------------------------------------------------+
| .. config-property::      | Ключ для связи подчинённых сущностей с главной; передаётся внутри самого     |
|    :name: $foreign_key    | метода ``kTempTablesHandler::CloneItems`` для рекурсивного клонирования      |
|    :type: int             | подчинённых сущностей.                                                       |
+---------------------------+------------------------------------------------------------------------------+
| .. config-property::      | Префикс главной сущности по отношению к текущей; передаётся внутри самого    |
|    :name: $parent_prefix  | метода ``kTempTablesHandler::CloneItems`` для рекурсивного клонирования      |
|    :type: string          | подчинённых сущностей.                                                       |
+---------------------------+------------------------------------------------------------------------------+
| .. config-property::      | Задаёт необходимость преобразования имён сущностей. Поле, содержащие имея    |
|    :name: $skip_filenames | сущности определяется в опции :ref:`uc_TitleField` конфигурационного файла.  |
|    :type: bool            | Например, при значении параметра ``true`` имя ``Nokia N73`` преобразуется в  |
|                           | ``Copy of Nokia N73``, а ``Copy of Nokia N73`` - в ``Copy 2 of Nokia N73``   |
|                           | и т.д.                                                                       |
+---------------------------+------------------------------------------------------------------------------+

Задать необходимость клонирования подчинённых сущностей при клонировании главной можно с помощью опции
:ref:`uc_AutoClone` в конфигурационном файле, например:

.. code:: php

   'AutoClone' => true,

.. seealso::

   - :doc:`/events/temp_editing`

.. _Data Source: http://guide.in-portal.org/rus/index.php/K4:%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0_%D1%81_%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D1%8B%D0%BC%D0%B8_%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D0%B0%D0%BC%D0%B8
