Протекание Процессов в Приложении
*********************************
`Data Source`_ `Confluence`_

.. include:: /includes/not_finished.rst

kApplication - центральный класс системы
========================================
Объект этого класса создаётся одним из первых и содержит среди своих свойств ссылки на другие важные
классы - Session, TemplateParser, kFactory, kHTTPQuery, kEventManager. Также, практически все прочие объекты
имеют среди своих свойств ссылку на центральный объект приложения. Таким образом обеспечивается взаимодействие
различных компонентов в системе.

.. code:: php

   $event = new kEvent('custom-sections:OnAddListingLog');
   $event->setEventParam('mode', LISTING_MODE_EXTERNAL);
   $this->Application->HandleEvent($event);

Пример иллюстрирует - благодаря тому, что центральный объект хранит ссылки на важнейшие объекты, практически из любого
места системы можно вызвать любое событие.

В методе kApplication::HandleEvent обработка события делегируется объекту, ссылка на который находится в свойстве
$this->Application->EventManager. По умолчанию это - объект класса
kEventManager.

В свою очередь, для обработки события из метода kEventManager::HandleEvent опять же следуют обращения к методам
центрального класса. Например, чтобы получить объект обработчика для конкретного указанного события, используется
такая конструкция:

.. code:: php

   $event_handler =& $this->Application->recallObject($event->Prefix.'_EventHandler');
   /* @var $event_handler kEventHandler */
   $event_handler->processEvent($event);

То есть, вызывается метод kApplication::recallObject, получающий ссылку на необходимый обработчик событий путём
обращения к другому базовому объекту, ссылка на который доступна в свойстве Factory.

.. code:: php

   $result =& $this->Factory->getObject($name, $pseudo_class, $event_params);

Если объект обработчика события ещё не создан, то объект класса kFactory его создаёт, и дополнительно, опять же -
обращаясь к центральному объекту Application, получает и обрабатывает событие (так называемое Build Event), которое
должно происходить при создании обработчика исходного события:

.. code:: php

   $event =& $this->Application->EventManager->getBuildEvent($pseudo_class);
   if($event)
   {
       $event->Init($prefix,$special);
       foreach($event_params as $param_name=>$param_value)
       {
           $event->setEventParam($param_name,$param_value);
       }
       $this->Application->HandleEvent($event);
   }


Основные фазы работы приложения
===============================
Это инициализация, основная фаза и фаза завершения. Пример - из стандартного кода скрипта index.php:

.. code:: php

   $application =& kApplication::Instance(); - получение ссылки на объект
   $application->Init(); - инициализация
   $application->Run(); - основная фаза
   $application->Done(); - фаза завершения


Фаза инициализации
==================
Для того, чтобы использовать всю мощь, все возможности K4, надо вначале обеспечить инфраструктуру - создать
все основные объекты, установить между ними связи, инициализировать эти объекты - то есть, произвести в них
операции в соответствии с поступившими данными HTTP-запроса, текущими настройками WEB-сервера, значениями в
базе данных и.т.п.


Подключение к базе данных и создание объекта для операций с базой данных
------------------------------------------------------------------------
В kApplication::Init() для этого есть такой код:

.. code:: php

   $this->Conn = new kDBConnection(SQL_TYPE, Array(&$this, 'handleSQLError') );  // создание объекта
   $this->Conn->debugMode = $this->isDebugMode();
   $this->Conn->Connect(SQL_SERVER, SQL_USER, SQL_PASS, SQL_DB); // подключение к базе данных проекта

Подключение к базе данных осуществляется через объект класса kDBConnection. Ссылка на объект помещается в свойство
Conn основного объекта приложения, в свою очередь, объект класса kDBConnection в своём конструкторе получает ссылку
на основной объект приложения и сохраняет его в своём свойстве Application:

.. code:: php

   $this->Application =& kApplication::Instance();

В классах, интенсивно использующих доступ к базе данных (например, в kDBBase и его наследниках kDBItem и kDBList),
в целях повышения скорости, ссылка на объект для операций с базой данных хранится в отдельном свойстве Conn:

.. code:: php

   function kDBBase()
   {
       parent::kBase();
       $this->Conn =& $this->Application->GetADODBConnection();
   }

Таким образом, после инициализации, практически из любого метода имеется лёгкий доступ к базе данных:

.. code:: php

   $all_tables = $this->Conn->Query('SHOW TABLES');


Создание объекта Factory и регистрация основных классов в нём
-------------------------------------------------------------
В kApplication::Init() для этого есть такой код:

.. code:: php

   $this->Factory = new kFactory();

Объект Factory - один из основных объектов приложения. Его предназначение - учитывать какие объекты уже создавались,
и, если запрашиваемый объект уже создавался - просто возвращать ссылку на него. Естественно, чтобы учитывать создание
других объектов, объект класса kFactory создаётся раньше.

В K4 широко применяется принцип отложенной инициализации. Объекты как правило создаются только тогда, когда они
становятся реально необходимы. Благодаря функциональности kFactory для соблюдения принципа отложенной инициализации
требуется только одно - зарегистрировать классы, из которых могут впоследствии создаваться объекты. Регистрация класса
это быстрая, требующая мало ресурсов операция, которая подразумевает запись в свойства-массивы объекта Factory таких
данных как:

- псевдоним класса
- расположение файла с кодом класса
- классы, которые должны быть определены прежде чем данный класс

Сразу же после создания объекта Factory регистрируются базовые классы - такие, которые необходимы для продолжения
инициализации приложения, либо на более поздних фазах работы приложения.

.. code:: php

   $this->RegisterDefaultClasses();

Название функции переводится с английского как "регистрировать классы по умолчанию". Это так называется потому, что
любой зарегистрированный в Factory класс может оказаться подменённым на более поздних этапах инициализации в
соответствии с конфигурацией конкретного приложения.

.. _Data Source: http://guide.in-portal.org/rus/index.php/K4:%D0%9F%D1%80%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BD%D0%B8%D0%B5_%D0%9F%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D0%B2_%D0%B2_%D0%9F%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B8
.. _Confluence: http://community.in-portal.org/pages/viewpage.action?pageId=14155809
