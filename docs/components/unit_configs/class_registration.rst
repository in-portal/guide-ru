Регистрация классов
===================
`Data Source`_
`Eng Data Source`_

Для того, чтобы использовать тот или иной класс в ``K4`` его необходимо сначала зарегистрировать.
Регистрация класса - это процесс, в результате которого ``K4`` становиться известно:

- название класса;
- где находиться файл, в котором класс описан;
- ``pseudo``, который будет использоваться для обращения к объекту класса.

.. note::

   ``pseudo`` - это ключевое слово, по которому можно в последствии из любого места в ``K4``
   получить объект класса, зарегистрированного под этим ``pseudo``.

Получение объекта
-----------------

Получить объект можно при помощи метода ``kApplication::recallObject``, например вот так:

.. code:: php

   $price =& $this->Application->recallObject('price');
   /* @var $price kDBItem */

Для того, чтобы в `Zend Studio <http://www.zend.com/products/zend_studio>`__ работала автоматическая
подсказка кода (``auto-complete``) нужно после получения объекта написать специальным образом
оформленный комментарий. В общем случае формат этого комментария таков:

.. code:: php

   /* @var $variable_name ClassName */

Регистрация класса
------------------

В :doc:`конфигурационном файле </components/unit_configs/config_files>` есть ряд опций со схожим форматом,
служащих для регистрации классов в ``K4``:

+-----------------------------+---------------------------------------+
| название опции              | используемый ``pseudo``               |
+=============================+=======================================+
| .. config-property::        | ``<prefix>``                          |
|    :name: ItemClass         |                                       |
|    :type: array             |                                       |
+-----------------------------+---------------------------------------+
| .. config-property::        | ``<prefix>_List``                     |
|    :name: ListClass         |                                       |
|    :type: array             |                                       |
+-----------------------------+---------------------------------------+
| .. config-property::        | ``<prefix>_EventHandler``             |
|    :name: EventHandlerClass |                                       |
|    :type: array             |                                       |
+-----------------------------+---------------------------------------+
| .. config-property::        | ``<prefix>_TagProcessor``             |
|    :name: TagProcessorClass |                                       |
|    :type: array             |                                       |
+-----------------------------+---------------------------------------+
| .. config-property::        | Задаётся в ручную в ключе ``pseudo``. |
|    :name: RegisterClasses   |                                       |
|    :type: array             |                                       |
+-----------------------------+---------------------------------------+


В приведённой выше таблице ``<prefix>`` это значение опции :ref:`uc_Prefix` в конфигурационном файле.
Значение каждой из выше написанных опций (кроме ``RegisterClasses``) является массивом следующего вида:

.. code:: php

   Array (
       'class' => 'ClassName',
       'file' => 'FileName',
       'build_event' => 'BuildEventName',
       'require_classes' => 'RequiredClassName'
   )

Все ключи в данном массиве, кроме ``require_classes``, обязательные. Правда значения некоторых из
ключей могут быть пустыми.

+---------------------------+----------------------------------------------------------------------------------------+
| название                  | описание                                                                               |
+===========================+========================================================================================+
| .. config-property::      | Название регистрируемого класса (название нового или системного класса).               |
|    :name: class           |                                                                                        |
|    :type: string          |                                                                                        |
|    :ref_prefix: rc_       |                                                                                        |
+---------------------------+----------------------------------------------------------------------------------------+
| .. config-property::      | Название файла, содержащего описание класса (по одному файлу на один класс);           |
|    :name: file            | если указано пустое значение то подразумевается, что используется системный класс.     |
|    :type: string          |                                                                                        |
|    :ref_prefix: rc_       |                                                                                        |
+---------------------------+----------------------------------------------------------------------------------------+
| .. config-property::      | Событие из :doc:`обработчике событий </events>`, использующееся для инициализации      |
|    :name: build_event     | экземпляров регистрируемого класса (т.е. объекта). Другими словами это конструктор     |
|    :type: string          | класса, который находиться в :doc:`обработчике событий </events>`.                     |
|    :ref_prefix: rc_       |                                                                                        |
+---------------------------+----------------------------------------------------------------------------------------+
| .. config-property::      | Название класса(-ов), описание которого должно быть загружено перед использованием     |
|    :name: require_classes | данного класса. Если указывается один класс, то значение данного ключа может быть      |
|    :type: mixed           | строкой. Если указывается несколько классов, то значение данного ключа будет массивом. |
|    :ref_prefix: rc_       |                                                                                        |
+---------------------------+----------------------------------------------------------------------------------------+

.. note::

   Значение **всех** ключей (кроме :ref:`rc_build_event`) этого массива должно подчиняться правилу
   :doc:`назначения имён </addons/coding_standards/naming_conventions>`.

Подмена классов
---------------

Бывают случаи, когда требуется заменить один или более используемых в системе классов. Для нужно
использовать ключ ``RegisterClasses``. При регистрации или подмене класса в ключе ``RegisterClasses``
требуется указывать дополнительный ключ ``pseudo``. В данном случае его нужно указывать, т.к. он не
может быть автоматически угадан (как во всех ранее описанных случаях).

.. code:: php

   'RegisterClasses' => Array (
       Array ('pseudo' => 'u_TagProcessor', 'class' => 'EUserTagProcessor', 'file' => 'e_user_tp.php'), // подменить обработчик тэгов пользователей
       Array ('pseudo' => 'PermissionsHelper', 'class' => 'ЕPermissionsHelper', 'file' => 'e_permission_helper.php'), // подменить класс помошника
   )

- При подмене класса нужно указывать тот ``pseudo``, с которым оригинальный (т.е. подменяемый) класс был
  изначально зарегистрирован. Этот ``pseudo`` можно узнать, если найти в проекте тот PHP-файл, в котором
  был изначально зарегистрирован требуемый класс.
- Регистрация подменённого класса должна происходить после регистрации оригинального класса. Это условие
  будет автоматически выполняться, если подмена класса описана в файле ``custom/units/sections/sections_config.php``.

Стандартные классы
------------------

Доступны следующие стандартные классы:

- ``kDBItem`` - класс, для работы с **одной** записью в базе;
- ``kDBList`` - класс для отображения содержания таблицы из базы (фильтрация, per-page и т.п.);
- ``kDBEventHandler`` - класс для обработки стандартных событий из списков и форм редактирования;
- ``kDBTagProcessor`` - класс для обработки стандартных тэгов, использующихся для вывода информации;
- ``kEventHandler`` - базовый класс для всех обработчиков событий (использовать только в целях
  экономии оперативной памяти);

Для стандартных классов значение ключа :ref:`rc_file` должно быть пустым.

.. _Data Source: http://guide.in-portal.org/rus/index.php/K4:%D0%A0%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%BE%D0%B2
.. _Eng Data Source: http://guide.in-portal.org/eng/index.php/K4:Registration_of_Unit_Classes
